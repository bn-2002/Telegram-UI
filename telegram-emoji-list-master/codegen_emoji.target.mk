# This file is generated by gyp; do not edit.

TOOLSET := target
TARGET := codegen_emoji
DEFS_Debug := \
	'-DQT_WIDGETS_LIB' \
	'-DQT_NETWORK_LIB' \
	'-DQT_GUI_LIB' \
	'-DQT_CORE_LIB' \
	'-D_REENTRANT' \
	'-DQT_STATICPLUGIN' \
	'-DQT_PLUGIN' \
	'-DQ_OS_LINUX32' \
	'-D_DEBUG' \
	'-DSUPPORT_IMAGE_GENERATION=1'

# Flags passed to all source files.
CFLAGS_Debug :=

# Flags passed to only C files.
CFLAGS_C_Debug := \
	-pipe \
	-Wall \
	-Werror \
	-W \
	-fPIC \
	-Wno-unused-variable \
	-Wno-unused-parameter \
	-Wno-unused-function \
	-Wno-switch \
	-Wno-comment \
	-Wno-unused-but-set-variable \
	-Wno-missing-field-initializers \
	-Wno-sign-compare \
	-std=gnu11

# Flags passed to only C++ files.
CFLAGS_CC_Debug := \
	-pipe \
	-Wall \
	-Werror \
	-W \
	-fPIC \
	-Wno-unused-variable \
	-Wno-unused-parameter \
	-Wno-unused-function \
	-Wno-switch \
	-Wno-comment \
	-Wno-unused-but-set-variable \
	-Wno-missing-field-initializers \
	-Wno-sign-compare \
	-std=c++1z \
	-Wno-register

INCS_Debug := \
	-I../SourceFiles \
	-I/usr/include/qt \
	-I/usr/include/qt/QtCore \
	-I/usr/include/qt/QtGui \
	-I/usr/include/qt/QtDBus \
	-I/usr/include/qt/QtCore/5.6.2 \
	-I/usr/include/qt/QtGui/5.6.2 \
	-I/usr/include/qt/QtCore/5.6.2/QtCore \
	-I/usr/include/qt/QtGui/5.6.2/QtGui \
	-I/usr/include/qt/mkspecs/linux-g++

DEFS_Release := \
	'-DQT_WIDGETS_LIB' \
	'-DQT_NETWORK_LIB' \
	'-DQT_GUI_LIB' \
	'-DQT_CORE_LIB' \
	'-D_REENTRANT' \
	'-DQT_STATICPLUGIN' \
	'-DQT_PLUGIN' \
	'-DQ_OS_LINUX32' \
	'-DNDEBUG'

# Flags passed to all source files.
CFLAGS_Release :=

# Flags passed to only C files.
CFLAGS_C_Release := \
	-pipe \
	-Wall \
	-Werror \
	-W \
	-fPIC \
	-Wno-unused-variable \
	-Wno-unused-parameter \
	-Wno-unused-function \
	-Wno-switch \
	-Wno-comment \
	-Wno-unused-but-set-variable \
	-Wno-missing-field-initializers \
	-Wno-sign-compare \
	-std=gnu11

# Flags passed to only C++ files.
CFLAGS_CC_Release := \
	-pipe \
	-Wall \
	-Werror \
	-W \
	-fPIC \
	-Wno-unused-variable \
	-Wno-unused-parameter \
	-Wno-unused-function \
	-Wno-switch \
	-Wno-comment \
	-Wno-unused-but-set-variable \
	-Wno-missing-field-initializers \
	-Wno-sign-compare \
	-std=c++1z \
	-Wno-register

INCS_Release := \
	-I../SourceFiles \
	-I/usr/include/qt \
	-I/usr/include/qt/QtCore \
	-I/usr/include/qt/QtGui \
	-I/usr/include/qt/QtDBus \
	-I/usr/include/qt/QtCore/5.6.2 \
	-I/usr/include/qt/QtGui/5.6.2 \
	-I/usr/include/qt/QtCore/5.6.2/QtCore \
	-I/usr/include/qt/QtGui/5.6.2/QtGui \
	-I/usr/include/qt/mkspecs/linux-g++

OBJS := \
	$(obj).target/$(TARGET)/../SourceFiles/codegen/common/cpp_file.o \
	$(obj).target/$(TARGET)/../SourceFiles/codegen/common/logging.o \
	$(obj).target/$(TARGET)/../SourceFiles/codegen/emoji/data.o \
	$(obj).target/$(TARGET)/../SourceFiles/codegen/emoji/generator.o \
	$(obj).target/$(TARGET)/../SourceFiles/codegen/emoji/main.o \
	$(obj).target/$(TARGET)/../SourceFiles/codegen/emoji/options.o \
	$(obj).target/$(TARGET)/../SourceFiles/codegen/emoji/replaces.o

# Add to the list of files we specially track dependencies for.
all_deps += $(OBJS)

# Make sure our dependencies are built before any of us.
$(OBJS): | $(obj).target/liblinux_glibc_wraps.a

# CFLAGS et al overrides must be target-local.
# See "Target-specific Variable Values" in the GNU Make manual.
$(OBJS): TOOLSET := $(TOOLSET)
$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))
$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))

# Suffix rules, putting all outputs into $(obj).

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.cpp FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

# Try building from generated source, too.

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.cpp FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.cpp FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

# End of this set of suffix rules
### Rules for final target.
LDFLAGS_Debug := \
	-static-libstdc++ \
	-pthread \
	-rdynamic \
	-L/usr/lib \
	-L/usr/lib/qt/ \
	-L/usr/lib/qt/plugins \
	-L/usr/include/qt/plugins/bearer \
	-L/usr/include/qt/plugins/platforms \
	-L/usr/include/qt/plugins/imageformats \
	-L/usr/include/qt/plugins/platforminputcontexts

LDFLAGS_Release := \
	-static-libstdc++ \
	-pthread \
	-rdynamic \
	-L/usr/lib \
	-L/usr/include/qt/lib \
	-L/usr/include/qt/plugins \
	-L/usr/include/qt/plugins/bearer \
	-L/usr/include/qt/plugins/platforms \
	-L/usr/include/qt/plugins/imageformats \
	-L/usr/include/qt/plugins/platforminputcontexts

LIBS := \
	$(builddir)/obj.target/liblinux_glibc_wraps.a \
	/usr/lib/libxkbcommon.so \
	-lQt5Core -lQt5Gui \
	-lxcb \
	-lX11 \
	-lX11-xcb \
	-ldbus-1 \
	-ldl \
	-lgthread-2.0 \
	-lglib-2.0 \
	-lpthread

$(builddir)/codegen_emoji: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))
$(builddir)/codegen_emoji: LIBS := $(LIBS)
$(builddir)/codegen_emoji: LD_INPUTS := $(OBJS) $(obj).target/liblinux_glibc_wraps.a
$(builddir)/codegen_emoji: TOOLSET := $(TOOLSET)
$(builddir)/codegen_emoji: $(OBJS) $(obj).target/liblinux_glibc_wraps.a FORCE_DO_CMD
	$(call do_cmd,link)

all_deps += $(builddir)/codegen_emoji
# Add target alias
.PHONY: codegen_emoji
codegen_emoji: $(builddir)/codegen_emoji

# Add executable to "all" target.
.PHONY: all
all: $(builddir)/codegen_emoji

